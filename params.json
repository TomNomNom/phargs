{"body":"# Phargs\r\n\r\nPhargs is a toolkit for writing CLI scripts in PHP; it was born out of frustration, anger, and \r\nboilerplate déjà vu. It is still very much a work in progress. Pull requests, issues, and \r\nsuggestions are always welcome.\r\n\r\nPhargs' main asset so far is its argument processor, although I am working on tools to make other \r\nthings easier too.\r\n\r\nEverything in Phargs is available through `\\Phargs\\Factory`.\r\n\r\n## Contents\r\nThis README file is a little long, so here's a breakdown of the contents to make navigation a little easier.\r\n\r\n* [Installation](#installation)\r\n* [Argument processing](#argument-processing)\r\n  - [Flags - Intro](#flags)\r\n  - [Flags - Basic usage](#basic-usage)\r\n  - [Flags - Flag aliases](#flag-aliases)\r\n  - [Flags - Compound flags](#compound-flags)\r\n  - [Params - Intro](#params)\r\n  - [Params - Basic usage](#basic-usage-1)\r\n  - [Params - Param aliases](#param-aliases)\r\n  - [Params - Required params](#required-params)\r\n  - [Residual args](#residual-args)\r\n* [Outputting to the screen](#outputting-to-the-screen)\r\n  - [Basic usage](#basic-usage-2)\r\n* [Prompting for input](#prompting-for-input)\r\n  - [Basic usage](#basic-usage-3)\r\n  - [Required input](#required-input)\r\n* [Requirements](#requirements)\r\n* [Testing](#testing)\r\n\r\n## Installation \r\n\r\nPhargs is available on [Packagist](https://packagist.org/packages/tomnomnom/phargs) so you can \r\ninstall it using [Composer](http://getcomposer.org/). Just specify it as a dependency in your \r\n`composer.json`:\r\n\r\n```json\r\n{\r\n    \"require\": {\r\n        \"tomnomnom/phargs\": \"0.0.2\"\r\n    }\r\n}\r\n```\r\n\r\nThen run `composer install`:\r\n\r\n    ▶ composer install\r\n    Loading composer repositories with package information\r\n    Installing dependencies\r\n      - Installing tomnomnom/phargs (0.0.2)\r\n        Loading from cache\r\n    \r\n    Writing lock file\r\n    Generating autoload files\r\n\r\n\r\nOnce installed you can use the composer autoloader instead of the `Phargs/Init.php` script that \r\nthe included examples use:\r\n\r\n```php\r\n<?php\r\nrequire __DIR__.'/vendor/autoload.php';\r\n\r\n$factory = new \\Phargs\\Factory();\r\n$screen = $factory->screen();\r\n\r\n$screen->outln(\"Hello, World!\");\r\n```\r\n\r\n\r\n## Argument processing\r\nThe [getopt](http://php.net/manual/en/function.getopt.php) interface isn't the most friendly thing in the world,\r\nPhargs tries to make your life a bit easier.\r\n \r\nThe argument processor is available via `\\Phargs\\Factory::args()`.\r\n\r\n### Flags\r\nA *flag* is an argument that turns functionality on or off. Common examples are `-h` to display \r\na help message or `--verbose` to display more output. \r\n\r\n#### Basic usage\r\nPhargs needs to be told to *expect* a flag in order to use it.\r\n\r\n```php\r\n<?php\r\n// ./Examples/Flags.php\r\n\r\n// Bootstrap Phargs\r\ninclude __DIR__.'/../Phargs/Init.php';\r\n\r\n// Everything in Phargs is available via the Factory\r\n$factory = new \\Phargs\\Factory();\r\n\r\n// Get an argument processor\r\n$args = $factory->args();\r\n\r\n// Expect the -h flag to be an argument\r\n$args->expectFlag('-h');\r\n\r\nif ($args->flagIsSet('-h')){\r\n  echo \"Help flag is set\\n\";\r\n} else {\r\n  echo \"Help flag is not set\";\r\n}\r\n```\r\n    ▶ php ./Examples/Flags.php -h\r\n    Help flag is set\r\n    ▶ php ./Examples/Flags.php\r\n    Help flag is not set\r\n\r\n#### Flag aliases\r\nYou can *alias* flags to make your script more user friendly. Phargs supports both \r\nlong (e.g. `--help`) and short (e.g. `-h`) flags.\r\n\r\n```php\r\n<?php\r\n// ./Examples/FlagAliases.php\r\n\r\ninclude __DIR__.'/../Phargs/Init.php';\r\n$factory = new \\Phargs\\Factory();\r\n$args = $factory->args();\r\n\r\n$args->expectFlag('-h');\r\n\r\n// Alias the -h flag to --help so either can be used\r\n$args->addFlagAlias('-h', '--help');\r\n\r\n// You could check for --help instead of -h here and it would still work\r\nif ($args->flagIsSet('-h')){\r\n  echo \"Help flag is set\\n\";\r\n} else {\r\n  echo \"Help flag is not set\\n\";\r\n}\r\n```\r\n    ▶ php ./Examples/FlagAliases.php -h\r\n    Help flag is set\r\n    ▶ php ./Examples/FlagAliases.php --help\r\n    Help flag is set\r\n\r\n#### Compound flags\r\nPhargs also supports *compound flags*; like how you might run `grep -Hnr $searchString *`.\r\n\r\n```php\r\n<?php\r\n// ./Examples/CompoundFlags.php\r\n\r\ninclude __DIR__.'/../Phargs/Init.php';\r\n$factory = new \\Phargs\\Factory();\r\n$args = $factory->args();\r\n\r\n$args->expectFlag('-H');\r\n$args->expectFlag('-n');\r\n$args->expectFlag('-r');\r\n\r\nif ($args->flagIsSet('-H')){\r\n  echo \"-H flag is set\\n\";\r\n}\r\nif ($args->flagIsSet('-n')){\r\n  echo \"-n flag is set\\n\";\r\n}\r\nif ($args->flagIsSet('-r')){\r\n  echo \"-r flag is set\\n\";\r\n}\r\n```\r\n\r\n    ▶ php ./Examples/CompoundFlags.php -Hnr\r\n    -H flag is set\r\n    -n flag is set\r\n    -r flag is set\r\n    ▶ php ./Examples/CompoundFlags.php -H -nr\r\n    -H flag is set\r\n    -n flag is set\r\n    -r flag is set\r\n    ▶ php ./Examples/CompoundFlags.php -Hni # Note: 'i' is unexpected\r\n    -H flag is set\r\n    -n flag is set\r\n    ▶ php ./Examples/CompoundFlags.php -n -r\r\n    -n flag is set\r\n    -r flag is set\r\n\r\n### Params\r\nA *param* is an argument that provides a value. They come in 4 flavours:\r\n\r\n* Long, with an equals (e.g. `--count=5`)\r\n* Long, with a space (e.g. `--count 5`)\r\n* Short, with a space (e.g. `-c 5`)\r\n* Short, without a space (e.g. `-c5`)\r\n\r\n#### Basic usage\r\nLike with flags, you must tell Phargs to *expect* a param. Unlike flags, you can also get the \r\n*value* of a param:\r\n\r\n```php\r\n<?php\r\n// ./Examples/Params.php\r\n\r\n// Bootstrap Phargs\r\ninclude __DIR__.'/../Phargs/Init.php';\r\n\r\n// Everything in Phargs is available via the Factory\r\n$factory = new \\Phargs\\Factory();\r\n\r\n// Get an argument processor\r\n$args = $factory->args();\r\n\r\n// Expect the --count param\r\n$args->expectParam('--count');\r\n\r\nif ($args->paramIsSet('--count')){\r\n  echo \"--count param is set\\n\";\r\n  echo \"--count value is: \";\r\n  echo $args->getParamValue('--count').PHP_EOL;\r\n} else {\r\n  echo \"--count param is not set\\n\";\r\n}\r\n```\r\n    ▶ php ./Examples/Params.php --count=5\r\n    --count param is set\r\n    --count value is: 5\r\n    ▶ php ./Examples/Params.php --count 5\r\n    --count param is set\r\n    --count value is: 5\r\n    ▶ php ./Examples/Params.php --help\r\n    --count param is not set\r\n\r\n#### Param aliases\r\nLike flags, params can be aliased:\r\n\r\n```php\r\n<?php\r\n// ./Examples/ParamAliases.php\r\n\r\ninclude __DIR__.'/../Phargs/Init.php';\r\n$factory = new \\Phargs\\Factory();\r\n$args = $factory->args();\r\n\r\n// Expect the --count param\r\n$args->expectParam('--count');\r\n\r\n// Alias --count to -c so that either can be used\r\n$args->addParamAlias('--count', '-c');\r\n\r\nif ($args->paramIsSet('--count')){\r\n  echo \"--count param is set\\n\";\r\n  echo \"--count value is: \";\r\n  echo $args->getParamValue('-c').PHP_EOL;\r\n} else {\r\n  echo \"--count param is not set\\n\";\r\n}\r\n```\r\n\r\n    ▶ php ./Examples/ParamAliases.php --count=5\r\n    --count param is set\r\n    --count value is: 5\r\n    ▶ php ./Examples/ParamAliases.php -c 5\r\n    --count param is set\r\n    --count value is: 5\r\n    ▶ php ./Examples/ParamAliases.php -c5\r\n    --count param is set\r\n    --count value is: 5\r\n    \r\n#### Required params\r\nIn the examples so far Phargs has *expected* to see params, but it doesn't mind if they're not there. \r\nIf a param is important enough you can *require* that it exists and then check that all requirements are met:\r\n\r\n```php\r\n<?php\r\n// ./Examples/RequiredParams.php\r\n\r\ninclude __DIR__.'/../Phargs/Init.php';\r\n$factory = new \\Phargs\\Factory();\r\n$args = $factory->args();\r\n\r\n// Require some params\r\n$args->requireParam('--count');\r\n$args->requireParam('--number');\r\n\r\n// Check that all argument requirements are met\r\nif ($args->requirementsAreMet()){\r\n  echo \"All arg requirements are met\\n\";\r\n} else {\r\n  echo \"Not all arg requirements are met\\n\";\r\n}\r\n```\r\n\r\n    ▶ php ./Examples/RequiredParams.php --count=4 --number=5\r\n    All arg requirements are met\r\n    ▶ php ./Examples/RequiredParams.php --count=4 \r\n    Not all arg requirements are met\r\n\r\n### Residual args\r\n*Residual args* are the arguments left over when expected params and flags have been removed. For example:\r\n\r\n    ./command -v help merge\r\n    \r\nAssuming the `-v` flag is expected by Phargs: `help` and `merge` are considered to be residual args. Residual\r\nargs are zero-indexed, and their indexes remain the same regardless of where any expected flags or params\r\nappear in the argument list. \r\n\r\nYou can get one, all, or a range of residual args:\r\n\r\n```php\r\n<?php\r\n// ./Examples/ResidualArgs.php\r\n\r\ninclude __DIR__.'/../Phargs/Init.php';\r\n$factory = new \\Phargs\\Factory();\r\n$args = $factory->args();\r\n\r\n// We're expecting some arguments\r\n$args->expectParam('--count');\r\n$args->expectFlag('-h');\r\n\r\n// Arguments we're not expecting are considered 'residual'\r\necho \"Residual arg #0: \".$args->getResidualArg(0).PHP_EOL;\r\necho \"All residual args: \".implode(', ', $args->getResidualArgs()).PHP_EOL;\r\necho \"First two residual args: \".implode(', ', $args->getResidualArgs(0, 2)).PHP_EOL;\r\n```\r\n\r\n    ▶ php ./Examples/ResidualArgs.php -h help merge\r\n    Residual arg #0: help\r\n    All residual args: help, merge\r\n    First two residual args: help, merge\r\n    ▶ php ./Examples/ResidualArgs.php help -h merge\r\n    Residual arg #0: help\r\n    All residual args: help, merge\r\n    First two residual args: help, merge\r\n    ▶ php ./Examples/ResidualArgs.php help -h merge this thing\r\n    Residual arg #0: help\r\n    All residual args: help, merge, this, thing\r\n    First two residual args: help, merge\r\n\r\n\r\n## Outputting to the screen\r\nPhargs provides an interface for outputting text to the screen.\r\n\r\nThe screen interface is available via `\\Phargs\\Factory::screen()`.\r\n\r\n### Basic usage\r\nAmongst other things, the screen interface provides methods to write to `stdout` and `stderr`, with or \r\nwithout trailing newline characters. It also provides some methods that are useful when debugging.\r\n\r\n```php\r\n<?php\r\n// ./Examples/ScreenBasic.php\r\n\r\ninclude __DIR__.'/../Phargs/Init.php';\r\n$factory = new \\Phargs\\Factory();\r\n\r\n// Get a screen interface\r\n$screen = $factory->screen();\r\n\r\n$screen->out(\"Hello, \");\r\n$screen->outln(\"World!\");\r\n\r\n$screen->err(\"Error \");\r\n$screen->errln(\"message\");\r\n\r\n$screen->printf(\"When in %s\".PHP_EOL, \"Rome\");\r\n\r\n$testVar = array(1, 2, 3);\r\n$screen->varExport($testVar);\r\n\r\n$screen->log('A log message');\r\n```\r\n\r\n    ▶ php ./Examples/ScreenBasic.php \r\n    Hello, World!\r\n    Error message\r\n    When in Rome\r\n    array (\r\n      0 => 1,\r\n      1 => 2,\r\n      2 => 3,\r\n    )\r\n    2012-12-22T15:16:50+00:00: A log message\r\n\r\n\r\n## Prompting for input\r\nPhargs has an interface for prompting for user input. \r\n\r\nThe prompter is available via `\\Phargs\\Factory::prompter()`.\r\n\r\n### Basic usage\r\nThe `prompt` method can be used to *prompt* the user for some input. The trailing newline character is removed.\r\n\r\n```php\r\n<?php\r\n// ./Examples/PrompterBasic.php\r\n\r\ninclude __DIR__.'/../Phargs/Init.php';\r\n$factory = new \\Phargs\\Factory();\r\n$screen = $factory->screen();\r\n\r\n// Get a prompter\r\n$prompter = $factory->prompter();\r\n\r\n// Prompt for some input\r\n$name = $prompter->prompt('What is your name? ');\r\n\r\n// Do something with the response\r\n$screen->outln(\"Hello, {$name}!\");\r\n```\r\n\r\n    ▶ php ./Examples/PrompterBasic.php \r\n    What is your name? Tom\r\n    Hello, Tom!\r\n\r\n### Required input \r\nYou can also require that a user input some information, optionally displaying a message when they don't. \r\n\r\n```php\r\n<?php\r\n// ./Examples/PrompterRequired.php\r\n\r\ninclude __DIR__.'/../Phargs/Init.php';\r\n$factory = new \\Phargs\\Factory();\r\n$screen = $factory->screen();\r\n\r\n// Get a prompter\r\n$prompter = $factory->prompter();\r\n\r\n// Prompt for some required input\r\n$name = $prompter->promptRequired('What is your name? ', 'No name entered!');\r\n\r\n// Do something with the response\r\n$screen->outln(\"Hello, {$name}!\");\r\n```\r\n\r\n    ▶ php ./Examples/PrompterRequired.php \r\n    What is your name? \r\n    No name entered!\r\n    What is your name? Tom\r\n    Hello, Tom!\r\n\r\n\r\n## Requirements\r\n\r\n* Linux of some description\r\n* PHP 5.3 or newer\r\n\r\n## Testing\r\n\r\nYou can run the full test suite by running:\r\n\r\n    ▶ phpunit\r\n\r\nThe tests are actually split up into 3 suites, which can be run individually:\r\n\r\n    ▶ phpunit --filter Unit\r\n    ▶ phpunit --filter Integration\r\n    ▶ phpunit --filter FullStack\r\n\r\nThe repo is hooked up to Travis CI. You can see the state of the master branch and the \r\nbuild history on the [Phargs Travis CI page](https://travis-ci.org/TomNomNom/phargs).\r\nThe full test suite runs under PHP 5.3 and PHP 5.4.\r\n","name":"Phargs","google":"","tagline":"A toolkit for writing CLI scripts in PHP","note":"Don't delete this file! It's used internally to help with page regeneration."}